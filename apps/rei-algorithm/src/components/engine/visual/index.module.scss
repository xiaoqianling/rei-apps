@use "sass:color";

.sortContainer {
  display: flex;
  flex-direction: column;
  width: 100%; // Ensure it takes full width of its container
  height: 100%;
  min-height: 80vh; // Example minimum height
  background-color: $bg-base; // Use new base background
  color: $text-medium; // Use new medium text color
  font-family: $font-primary;
  position: relative; // 确保父容器有相对定位
}

.mainContent {
  flex-grow: 1; // Take remaining vertical space
  display: flex;
  padding: 20px;
  gap: 20px;
  overflow: hidden; // Prevent scrollbars on this container
}

// --- Editor Header --- //
.editorHeader {
  background-color: color.adjust(
    $bg-base,
    $lightness: -2%
  ); // Slightly darker than base
  padding: 10px 20px;
  border-bottom: 1px solid $border-light;
  display: flex;
  align-items: center;
  gap: 15px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);

  .titleContainer {
    flex-grow: 1;
    display: flex;
    align-items: center;
    gap: 10px;

    .titleDisplay {
      font-size: 1.1rem;
      font-weight: 600;
      color: $text-dark;
      cursor: pointer;
      padding: 5px 0;
      border-bottom: 2px solid transparent; // For hover effect
      transition: border-color 0.2s ease;

      &:hover {
        border-color: $primary-accent;
      }
    }

    .titleInput {
      font-size: 1.1rem;
      font-weight: 600;
      color: $text-dark;
      border: none;
      outline: none;
      padding: 5px 8px;
      border-radius: 4px;
      background-color: #fff; // White background for editing
      border: 1px solid $border-color;
      width: auto; // Adjust width as needed
      box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
    }
  }

  .headerActions {
    display: flex;
    gap: 10px;
  }

  // Shared button style for header
  .headerButton {
    background-color: transparent;
    border: 1px solid $border-color;
    color: $text-medium;
    padding: 6px 12px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 0.85rem;
    transition: all 0.2s ease;

    &:hover:not(:disabled) {
      background-color: $miku;
      color: #fff;
      border-color: $miku;
      transform: translateY(-1px);
    }

    &:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }
  }
  .saveButton {
    background-color: $miku;
    color: #fff;
    border-color: $miku;
    &:hover:not(:disabled) {
      background-color: $primary-dark;
      border-color: $primary-dark;
    }
  }
}

// --- Shared Styles --- //
.codeArea {
  flex: 1 1 45%; // Flex basis 45%
  background-color: color.adjust(
    $bg-base,
    $lightness: -1%
  ); // Slightly darker background
  border-radius: $border-radius;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
  overflow: hidden; // Changed from auto to hidden, handle scrolling inside pre
  padding: 0; // Remove padding, apply to inner elements
  border: 1px solid $border-light;
  display: flex;
  flex-direction: column; // Stack code and description

  // Styles for the code block itself (assuming pre > code structure)
  :global(pre) {
    flex-grow: 1; // Allow code block to take available space
    font-family: "Fira Code", "Consolas", monospace; // Use a monospace font
    font-size: 0.9em;
    line-height: 1.6;
    background-color: #fff; // White background for code
    color: $text-dark;
    padding: 15px;
    margin: 0; // Remove default margin
    overflow-y: auto; // Allow scrolling specifically on the code block
    border-radius: $border-radius $border-radius 0 0; // Round top corners
    border-bottom: 1px solid $border-light; // Use new border color

    .highlighted-line {
      background-color: rgba($miku, 0.1); // Use miku color for highlight bg
      display: block;
      margin: 0 -15px;
      padding: 0 15px;
      box-shadow: inset 3px 0 0 0 $miku; // Use miku for left border
    }
  }

  // Example: Styles for a description area (assuming CodeDesc has this class)
  .description {
    background-color: color.adjust(
      $bg-base,
      $lightness: 1%
    ); // Lighter than code area bg
    color: $text-medium; // Use new text color
    padding: 10px 15px;
    font-size: 0.85em;
    border-top: none;
    min-height: 50px;
    border-radius: 0 0 $border-radius $border-radius;
  }
}

.canvasArea {
  flex: 1 1 55%; // Flex basis 55%
  background-color: #fff; // Keep canvas container white for now, or use lighten($bg-base, 2%)
  border-radius: $border-radius;
  box-shadow: inset 0 0 8px rgba(0, 0, 0, 0.1);
  border: 1px solid $border-light; // Use new border color
  display: flex; // To center canvas if needed
  justify-content: center;
  align-items: center;
  overflow: hidden; // Clip content if canvas is larger

  :global(canvas) {
    // Style the canvas element itself
    max-width: 100%;
    max-height: 100%;
    // background-color: #fff; // Example: Make canvas background white for contrast
    display: block; // Remove extra space below canvas
  }
}

.controlsArea {
  background-color: color.adjust(
    $bg-base,
    $lightness: -2%
  ); // Slightly darker than base bg
  padding: 15px 20px;
  border-top: 1px solid $border-light; // Use new border color
  box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.05);
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.controlTop {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 20px;
}

.navLinks {
  flex-shrink: 0; // Prevent shrinking
  a {
    color: $text-medium; // Use new text color
    text-decoration: none;
    margin-right: 15px;
    padding: 5px 10px;
    border-radius: 4px;
    transition: all 0.2s ease;
    font-weight: 500;

    &:hover {
      background-color: $miku; // Use miku for hover bg
      color: #fff;
    }
    &.activeLink {
      // Example active class if using NavLink
      color: $miku; // Use miku for active text
      font-weight: 600;
      background-color: rgba($miku, 0.1); // Light miku bg for active
    }
  }
}

.inputSection {
  flex-grow: 1; // Take available space
  display: flex;
  justify-content: flex-end; // Align input to the right
}

.inputGroup {
  display: flex;
  align-items: center;
  gap: 10px;
  background-color: #fff; // Keep input group white
  padding: 5px 10px;
  border-radius: $border-radius;
  border: 1px solid $border-light; // Use new border color

  .arrayInput {
    background-color: transparent;
    border: none;
    color: $text-dark; // Use new text color
    padding: 8px;
    outline: none;
    font-size: 0.9em;
    min-width: 200px; // Ensure it's not too small

    &::placeholder {
      color: $text-light; // Use new text color
    }
    &:focus {
      box-shadow: 0 0 0 2px rgba($miku, 0.2); // Add miku focus ring
    }
  }

  .confirmButton {
    // Apply shared button styles
    background-color: $miku; // Use miku for button bg
    color: #fff;
    border: none;
    padding: 8px 15px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 0.9em;
    transition: all 0.2s ease;

    &:hover:not(:disabled) {
      background-color: $primary-dark; // Use derived dark color
    }

    &:active:not(:disabled) {
      transform: scale(0.98);
    }

    &:disabled {
      background-color: $primary-light; // Use derived light color
      color: $text-medium; // Use new text color
      cursor: not-allowed;
    }
  }
}

.actionButtons {
  display: flex;
  justify-content: center; // Center buttons
  gap: 15px;

  button {
    background-color: $miku; // Use miku for main action buttons
    color: #fff;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1em;
    font-weight: 500;
    transition: all 0.2s ease;

    &:hover:not(:disabled) {
      background-color: $primary-dark; // Use derived dark color
      transform: translateY(-1px);
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    &:active:not(:disabled) {
      transform: scale(0.98) translateY(0);
    }

    &:disabled {
      background-color: $primary-light; // Use derived light color
      color: $text-medium; // Use new text color
      cursor: not-allowed;
    }
  }
}

// Responsive adjustments (example)
@media (max-width: 768px) {
  .mainContent {
    flex-direction: column;
    height: auto; // Adjust height for stacked layout
  }

  .codeArea,
  .canvasArea {
    flex: 1 1 auto; // Reset flex basis
    min-height: 300px; // Ensure minimum height when stacked
  }

  .controlTop {
    flex-direction: column;
    align-items: stretch;
    gap: 10px;
  }

  .navLinks {
    text-align: center;
    a {
      margin: 5px;
    }
  }
  .inputSection {
    justify-content: center;
  }
  .actionButtons {
    flex-wrap: wrap; // Allow buttons to wrap on small screens
  }
}

// Loading Overlay Styles
.loadingOverlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5); // 半透明背景
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  z-index: 10; // 确保在最上层
  color: white;
  font-size: 1.2em;

  .loadingSpinner {
    border: 4px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top: 4px solid #fff; // 旋转部分的颜色
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite; // 应用旋转动画
    margin-bottom: 15px;
  }

  span {
    text-shadow: 1px 1px 2px black;
  }
}

// Error Overlay Styles
.errorOverlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(255, 0, 0, 0.7); // 红色半透明背景
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  z-index: 10;
  color: white;
  text-align: center;
  padding: 20px;
  animation: fadeIn 0.5s ease-in-out; // 应用淡入动画

  .errorIcon {
    font-size: 3em;
    font-weight: bold;
    margin-bottom: 15px;
    background-color: white;
    color: red;
    border-radius: 50%;
    width: 60px;
    height: 60px;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
  }

  span {
    font-size: 1.1em;
    margin-bottom: 20px;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.7);
  }

  .retryButton {
    // 重命名此类
    padding: 8px 15px;
    background-color: white;
    color: red;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-weight: bold;
    transition:
      background-color 0.3s,
      color 0.3s,
      transform 0.1s ease;

    &:hover {
      background-color: #eee;
      color: darkred;
    }

    &:active {
      transform: scale(0.97); // 添加点击效果
    }
  }
}

// Keyframes for animations
@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: scale(0.9);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

// --- Algorithm Square Button --- //
.algoSquareButton {
  // Applied to a <Link> element
  display: inline-flex; // Crucial for aligning icon and text in a link
  align-items: center;
  gap: 5px; // Space between icon and text
  background-color: transparent;
  border: 1px solid $miku;
  color: $miku;
  padding: 6px 12px; // Match header button padding
  border-radius: 5px; // Match header button radius
  cursor: pointer;
  font-size: 0.85rem; // Match header button font-size
  font-weight: 500;
  text-decoration: none !important; // Ensure no underline from Link
  transition: all 0.2s ease;
  margin-left: 10px; // Keep margin

  svg {
    // Optional: Style icon if needed
  }

  &:hover {
    background-color: rgba($miku, 0.1);
    color: $primary-dark;
    border-color: $primary-dark;
    text-decoration: none; // Ensure no underline on hover either
  }
}
