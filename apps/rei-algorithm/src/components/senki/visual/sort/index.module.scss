.sortContainer {
  display: flex;
  flex-direction: column;
  width: 100%; // Ensure it takes full width of its container
  min-height: 80vh; // Example minimum height
  background-color: #1a1a2e; // Dark background
  color: #e0e0e0;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.mainContent {
  flex-grow: 1; // Take remaining vertical space
  display: flex;
  padding: 20px;
  gap: 20px;
  overflow: hidden; // Prevent scrollbars on this container
}

.codeArea {
  flex: 1 1 45%; // Flex basis 45%
  background-color: #2a2a40; // Slightly lighter background for code
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
  overflow: hidden; // Changed from auto to hidden, handle scrolling inside pre
  padding: 0; // Remove padding, apply to inner elements
  border: 1px solid #4a4a6a;
  display: flex;
  flex-direction: column; // Stack code and description

  // Styles for the code block itself (assuming pre > code structure)
  :global(pre) {
    flex-grow: 1; // Allow code block to take available space
    font-family: 'Fira Code', 'Consolas', monospace; // Use a monospace font
    font-size: 0.9em;
    line-height: 1.6;
    background-color: #24243e; // Slightly different bg for pre
    color: #d0d0ff; // Code text color
    padding: 15px;
    margin: 0; // Remove default margin
    overflow-y: auto; // Allow scrolling specifically on the code block
    border-radius: 8px 8px 0 0; // Round top corners

    // Example: Style for highlighted line (assuming CodeDesc adds this class)
    .highlighted-line {
      background-color: rgba(74, 74, 122, 0.5); // Semi-transparent highlight
      display: block;
      margin: 0 -15px; // Extend highlight to padding edges
      padding: 0 15px;
      box-shadow: inset 3px 0 0 0 #a0a0e0; // Left border highlight
    }
    // Add more syntax highlighting styles here if needed
  }

  // Example: Styles for a description area (assuming CodeDesc has this class)
  .description {
      background-color: #3a3a5a;
      color: #c0c0e0;
      padding: 10px 15px;
      font-size: 0.85em;
      border-top: 1px solid #4a4a6a;
      min-height: 50px; // Ensure some minimum height
      border-radius: 0 0 8px 8px; // Round bottom corners
  }
}

.canvasArea {
  flex: 1 1 55%; // Flex basis 55%
  background-color: #2f2f4f; // Background for canvas container
  border-radius: 8px;
  box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.5);
  border: 1px solid #4a4a6a;
  display: flex; // To center canvas if needed
  justify-content: center;
  align-items: center;
  overflow: hidden; // Clip content if canvas is larger

  :global(canvas) { // Style the canvas element itself
    max-width: 100%;
    max-height: 100%;
    // background-color: #fff; // Example: Make canvas background white for contrast
    display: block; // Remove extra space below canvas
  }
}

.controlsArea {
  background-color: #24243e; // Darker background for controls
  padding: 15px 20px;
  border-top: 1px solid #4a4a6a;
  box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.2);
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.controlTop {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 20px;
}

.navLinks {
  flex-shrink: 0; // Prevent shrinking
  a {
    color: #a0a0e0; // Light purple/blue
    text-decoration: none;
    margin-right: 15px;
    padding: 5px 10px;
    border-radius: 4px;
    transition: background-color 0.3s ease, color 0.3s ease;

    &:hover {
      background-color: #4a4a6a;
      color: #fff;
    }

    span { // Keep spans for potential future styling
        display: inline-block;
    }

    // Consider adding active styling if needed via react-router NavLink
  }
}

.inputSection {
    flex-grow: 1; // Take available space
    display: flex;
    justify-content: flex-end; // Align input to the right
}

.inputGroup {
  display: flex;
  align-items: center;
  gap: 10px;
  background-color: #2f2f4f;
  padding: 5px 10px;
  border-radius: 6px;
  border: 1px solid #4a4a6a;

  .arrayInput {
    background-color: transparent;
    border: none;
    color: #e0e0e0;
    padding: 8px;
    outline: none;
    font-size: 0.9em;
    min-width: 200px; // Ensure it's not too small

    &::placeholder {
      color: #888;
    }
  }

  .confirmButton {
      // Apply shared button styles
      background-color: #4a4a7a; // Button background
      color: #e0e0e0;
      border: none;
      padding: 8px 15px; // Slightly smaller padding to fit input group
      border-radius: 5px;
      cursor: pointer;
      font-size: 0.9em; // Slightly smaller font size
      transition: background-color 0.3s ease, transform 0.1s ease;

      &:hover:not(:disabled) {
        background-color: #6a6aaf; // Lighter on hover
      }

      &:active:not(:disabled) {
        transform: scale(0.98); // Slight press effect
      }

      &:disabled {
        background-color: #3a3a5a; // Darker when disabled
        color: #888;
        cursor: not-allowed;
      }
  }
}

.actionButtons {
  display: flex;
  justify-content: center; // Center buttons
  gap: 15px;

  button {
    background-color: #4a4a7a; // Button background
    color: #e0e0e0;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1em;
    transition: background-color 0.3s ease, transform 0.1s ease;

    &:hover:not(:disabled) {
      background-color: #6a6aaf; // Lighter on hover
    }

    &:active:not(:disabled) {
      transform: scale(0.98); // Slight press effect
    }

    &:disabled {
      background-color: #3a3a5a; // Darker when disabled
      color: #888;
      cursor: not-allowed;
    }
  }
}

// Responsive adjustments (example)
@media (max-width: 768px) {
  .mainContent {
    flex-direction: column;
    height: auto; // Adjust height for stacked layout
  }

  .codeArea, .canvasArea {
    flex: 1 1 auto; // Reset flex basis
    min-height: 300px; // Ensure minimum height when stacked
  }

  .controlTop {
      flex-direction: column;
      align-items: stretch;
      gap: 10px;
  }

  .navLinks {
      text-align: center;
      a {
          margin: 5px;
      }
  }
  .inputSection {
      justify-content: center;
  }
  .actionButtons {
      flex-wrap: wrap; // Allow buttons to wrap on small screens
  }
}
